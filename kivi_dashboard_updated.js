// kivi_dashboard_updated.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
document.addEventListener("sheets-ready", () => {
  console.log("üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—à–±–æ—Ä–¥...");
  loadSummary();
  loadChart();
  buildComparisonBlock();
});

function cleanNumber(val) {
  if (!val) return 0;
  if (typeof val === 'number') return val;
  return parseFloat(val.toString().replace(/\s/g, '').replace(',', '.')) || 0;
}

async function loadSummary() {
  try {
    const data    = window.DATASETS.data;
    const plans   = window.DATASETS.plans;
    const records = window.DATASETS.records;

    if (!data || !plans || !records) {
      console.error("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", { data: !!data, plans: !!plans, records: !!records });
      return;
    }

    console.log("üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:");
    console.log("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:", data.length);
    if (data.length > 0) {
      console.log("–ö–æ–ª–æ–Ω–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:", Object.keys(data[0]));
      console.log("–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞:", data[0]);
    }

    const today = new Date();
    const ym = today.toISOString().slice(0, 7); // 2025-08
    const currentDay = today.getDate();
    
    console.log("–ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞:", ym);
    console.log("–î–æ –¥–Ω—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ:", currentDay);

    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
    const dateColumn = "–î–µ–Ω—å";        // –í —Ç–∞–±–ª–∏—Ü–µ –∫–æ–ª–æ–Ω–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–î–µ–Ω—å", –∞ –Ω–µ "–î–∞—Ç–∞"
    const revenueColumn = "–¢–û";       // –ö–æ–ª–æ–Ω–∫–∞ C - –≤—ã—Ä—É—á–∫–∞
    const trafficColumn = "–¢–†";       // –ö–æ–ª–æ–Ω–∫–∞ E - —Ç—Ä–∞—Ñ–∏–∫  

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const thisMonthRows = data.filter(r => {
      const dateValue = r[dateColumn];
      if (!dateValue) return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –Ω–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
      const dateStr = dateValue.toString();
      const d = new Date(dateValue);
      
      return dateStr.startsWith(ym) && 
             d.getDate() <= currentDay && 
             r[revenueColumn] && 
             cleanNumber(r[revenueColumn]) > 0;
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: ${thisMonthRows.length}`);
    
    if (thisMonthRows.length > 0) {
      console.log("–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:");
      thisMonthRows.slice(0, 3).forEach((row, i) => {
        console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, {
          –¥–µ–Ω—å: row[dateColumn],
          —Ç–æ: row[revenueColumn],
          —Ç—Ä: row[trafficColumn]
        });
      });
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥ (—Ç–æ—Ç –∂–µ –º–µ—Å—è—Ü)
    const lastYearDate = new Date(today);
    lastYearDate.setFullYear(today.getFullYear() - 1);
    const lastYm = lastYearDate.toISOString().slice(0, 7); // 2024-08
    
    const lastYearRows = data.filter(r => {
      const dateValue = r[dateColumn];
      if (!dateValue) return false;
      
      const dateStr = dateValue.toString();
      const d = new Date(dateValue);
      
      return dateStr.startsWith(lastYm) && 
             d.getDate() <= currentDay && 
             r[revenueColumn] && 
             cleanNumber(r[revenueColumn]) > 0;
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥ (${lastYm}): ${lastYearRows.length}`);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const validDays = new Set(thisMonthRows.map(r => r[dateColumn].toString().split("-")[2]));
    const dayCount = validDays.size || 1;

    const totalTo = thisMonthRows.reduce((sum, r) => sum + cleanNumber(r[revenueColumn]), 0);
    const totalTr = thisMonthRows.reduce((sum, r) => sum + cleanNumber(r[trafficColumn]), 0);
    const avgTo = Math.round(totalTo / dayCount);
    const avgTr = Math.round(totalTr / dayCount);
    const avgCheck = avgTr ? Math.round(avgTo / avgTr) : 0;

    console.log("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", { 
      totalTo: totalTo.toLocaleString('ru-RU'), 
      totalTr, 
      avgTo: avgTo.toLocaleString('ru-RU'), 
      avgTr, 
      avgCheck: avgCheck.toLocaleString('ru-RU'),
      dayCount 
    });

    // –ò—â–µ–º –ø–ª–∞–Ω –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    console.log("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–æ–≤:", plans.length > 0 ? Object.keys(plans[0]) : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
    const planRow = plans.find(r => r["–ú–µ—Å—è—Ü"] === ym);
    console.log("–ù–∞–π–¥–µ–Ω –ø–ª–∞–Ω –¥–ª—è –º–µ—Å—è—Ü–∞:", planRow);
    
    const planTo = cleanNumber(planRow?.["–ü–ª–∞–Ω –ø–æ –≤—ã—Ä—É—á–∫–µ"]);
    const planTr = cleanNumber(planRow?.["–ü–ª–∞–Ω –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É"]);
    const planAvg = planTo && planTr ? Math.round(planTo / planTr) : 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    document.getElementById("planTo").textContent = planTo.toLocaleString("ru-RU") + "‚ÇΩ";
    document.getElementById("planTraffic").textContent = planTr + " —á–µ–ª.";
    document.getElementById("planAvg").textContent = planAvg + "‚ÇΩ";

    document.getElementById("factTo").textContent = avgTo.toLocaleString("ru-RU") + "‚ÇΩ";
    document.getElementById("factTraffic").textContent = avgTr + " —á–µ–ª.";
    document.getElementById("factAvg").textContent = avgCheck + "‚ÇΩ";

    // –†–µ–∫–æ—Ä–¥—ã
    const recTo = records.find(r => r["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"]?.includes("–≤—ã—Ä—É—á–∫–∞"));
    const recTr = records.find(r => r["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"]?.includes("—Ç—Ä–∞—Ñ–∏–∫"));

    if (recTo) {
      document.getElementById("recordTo").textContent = 
        cleanNumber(recTo.–ó–Ω–∞—á–µ–Ω–∏–µ).toLocaleString("ru-RU") + "‚ÇΩ";
    }
    if (recTr) {
      document.getElementById("recordTraffic").textContent = 
        cleanNumber(recTr.–ó–Ω–∞—á–µ–Ω–∏–µ).toLocaleString("ru-RU");
    }

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º
    const prevTo = lastYearRows.reduce((s, r) => s + cleanNumber(r[revenueColumn]), 0);
    const currTo = thisMonthRows.reduce((s, r) => s + cleanNumber(r[revenueColumn]), 0);
    const diff = prevTo ? Math.round((currTo - prevTo) / prevTo * 100) : 0;
    
    document.getElementById("comparePrev").textContent = (diff >= 0 ? "+" : "") + diff + "%";

    console.log("‚úÖ –°–≤–æ–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–¥–∫–∏:", error);
  }
}

async function loadChart() {
  try {
    const allRows = window.DATASETS.data;
    if (!allRows) {
      console.error("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
      return;
    }

    const today = new Date();
    const dateColumn = "–î–µ–Ω—å";
    const revenueColumn = "–¢–û";

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –¥–∞—Ç–∞–º–∏ –Ω–µ –≤ –±—É–¥—É—â–µ–º
    const rows = allRows.filter(r => {
      const dateValue = r[dateColumn];
      if (!dateValue) return false;
      
      const d = new Date(dateValue);
      return !isNaN(d) && 
             d <= today && 
             r[revenueColumn] && 
             cleanNumber(r[revenueColumn]) > 0;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const sortedRows = rows.sort((a, b) => new Date(a[dateColumn]) - new Date(b[dateColumn]));
    const last7 = sortedRows.slice(-7);

    if (last7.length === 0) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π");
      return;
    }

    const labels = last7.map(row => {
      const date = new Date(row[dateColumn]);
      const weekday = date.toLocaleDateString("ru-RU", { weekday: 'short' });
      return `${date.getDate()} ${weekday}`;
    });

    const revenues = last7.map(row => cleanNumber(row[revenueColumn]));
    const highlight = last7.map(row => 
      row["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ (–î–∞/–ù–µ—Ç)"]?.toString().trim().toLowerCase() === "–¥–∞"
    );
    
    const yMax = Math.ceil(Math.max(...revenues) / 10000) * 10000;

    const chartEl = document.getElementById("salesChart");
    if (!chartEl) return;

    const ctx = chartEl.getContext("2d");

    if (window.salesChartInstance) {
      window.salesChartInstance.destroy();
    }

    window.salesChartInstance = new Chart(ctx, {
      type: "bar",
      data: {
        labels: labels,
        datasets: [{
          data: revenues,
          backgroundColor: highlight.map(done => done ? '#FFD700' : '#FFFFFF'),
          borderRadius: 10,
          barPercentage: 0.8,
          categoryPercentage: 0.8
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false },
          tooltip: { enabled: false },
          datalabels: { display: false }
        },
        scales: {
          y: {
            min: 0,
            max: yMax,
            ticks: { display: false },
            grid: {
              color: context => context.tick.value % 10000 === 0 ? 'rgba(255,255,255,0.5)' : 'transparent'
            }
          },
          x: {
            ticks: { display: false },
            grid: { display: false }
          }
        }
      },
      plugins: [ChartDataLabels]
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
    const labelContainer = document.getElementById("customLabels");
    if (labelContainer) {
      labelContainer.innerHTML = "";
      labels.forEach((label, i) => {
        const div = document.createElement("div");
        div.className = "label-item";
        div.innerHTML = `<div class='revenue'>${revenues[i].toLocaleString('ru-RU')}</div><div class='date'>${label}</div>`;
        labelContainer.appendChild(div);
      });
    }

    console.log("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞:", error);
  }
}

async function buildComparisonBlock() {
  try {
    const data = window.DATASETS.data;
    if (!data) return;

    const now = new Date();
    const thisMonth = now.toISOString().slice(0, 7);
    const lastYear = new Date(now);
    lastYear.setFullYear(now.getFullYear() - 1);
    const lastMonth = lastYear.toISOString().slice(0, 7);
    const todayDate = now.getDate();

    const dateColumn = "–î–µ–Ω—å";
    const revenueColumn = "–¢–û";
    const trafficColumn = "–¢–†";

    const rowsThis = data.filter(r => r[dateColumn]?.toString().startsWith(thisMonth));
    const rowsLast = data.filter(r => r[dateColumn]?.toString().startsWith(lastMonth));

    const parseRows = rows => Object.fromEntries(rows.map(r => {
      const dateStr = r[dateColumn]?.toString();
      if (!dateStr) return [null, null];
      
      const day = parseInt(dateStr.split("-")[2]);
      const date = new Date(dateStr);
      const traffic = Math.round(cleanNumber(r[trafficColumn]));
      const revenue = Math.round(cleanNumber(r[revenueColumn]));
      return [day, { day, date, traffic, revenue }];
    }).filter(([key]) => key !== null));

    const mapThis = parseRows(rowsThis);
    const mapLast = parseRows(rowsLast);
    const days = Object.keys(mapThis).map(Number).filter(d => d <= todayDate).sort((a, b) => b - a);

    const compareTableEl = document.getElementById("compareTable");
    if (!compareTableEl) return;

    const table = document.createElement('table');
    table.innerHTML = `<tr><th>–î–µ–Ω—å</th><th>–ü—Ä–æ—à–ª—ã–π –≥–æ–¥</th><th>–¢–µ–∫—É—â–∏–π –≥–æ–¥</th></tr>`;

    window.allDataRows = days.map((day, i) => {
      const row = document.createElement('tr');
      if (i >= 6) row.classList.add('hidden-row');

      const current = mapThis[day];
      const previous = mapLast[day] || { date: '-', traffic: 0, revenue: 0 };

      const w1 = previous.date instanceof Date && !isNaN(previous.date)
        ? previous.date.toLocaleDateString('ru-RU', { weekday: 'short' })
        : '-';
      const w2 = current.date instanceof Date && !isNaN(current.date)
        ? current.date.toLocaleDateString('ru-RU', { weekday: 'short' })
        : '-';

      if (current.revenue > previous.revenue) row.classList.add('highlight');

      row.innerHTML = `
        <td>${day}</td>
        <td>${w1}, ${previous.revenue.toLocaleString("ru-RU")}‚ÇΩ, ${previous.traffic} —á–µ–ª.</td>
        <td>${w2}, ${current.revenue.toLocaleString("ru-RU")}‚ÇΩ, ${current.traffic} —á–µ–ª.</td>`;
      return row;
    });

    window.allDataRows.forEach(r => table.appendChild(r));
    compareTableEl.appendChild(table);

    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", error);
  }
}
