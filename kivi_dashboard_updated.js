// kivi_dashboard_updated.js —Å –æ—Ç–ª–∞–¥–∫–æ–π
document.addEventListener("sheets-ready", () => {
  console.log("üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—à–±–æ—Ä–¥...");
  loadSummary();
  loadChart();
  buildComparisonBlock();
});

function cleanNumber(val) {
  return parseFloat((val || '0').replace(/\s/g, '').replace(',', '.'));
}

async function loadSummary() {
  try {
    const data    = window.DATASETS.data;
    const plans   = window.DATASETS.plans;
    const records = window.DATASETS.records;

    if (!data || !plans || !records) {
      console.error("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", { data: !!data, plans: !!plans, records: !!records });
      return;
    }

    // üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    console.log("üîç –û–¢–õ–ê–î–ö–ê –î–ê–ù–ù–´–•:");
    console.log("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:", data.length);
    
    if (data.length > 0) {
      console.log("–ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö:", Object.keys(data[0]));
      console.log("–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", data[0]);
      console.log("–ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫:");
      data.slice(0, 5).forEach((row, i) => {
        console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, {
          –¥–∞—Ç–∞: row["–î–∞—Ç–∞"] || row["–¥–∞—Ç–∞"] || row["Date"] || "–ù–ï–¢",
          –≤—ã—Ä—É—á–∫–∞: row["–¢–û"] || row["—Ç–æ"] || row["–í—ã—Ä—É—á–∫–∞"] || row["–≤—ã—Ä—É—á–∫–∞"] || "–ù–ï–¢",
          —Ç—Ä–∞—Ñ–∏–∫: row["–¢–†"] || row["—Ç—Ä"] || row["–¢—Ä–∞—Ñ–∏–∫"] || row["—Ç—Ä–∞—Ñ–∏–∫"] || "–ù–ï–¢"
        });
      });
    }

    if (plans.length > 0) {
      console.log("–ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ –ø–ª–∞–Ω–∞—Ö:", Object.keys(plans[0]));
      console.log("–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–ª–∞–Ω–æ–≤:", plans[0]);
    }

    const today = new Date();
    const ym = today.toISOString().slice(0, 7);
    const currentDay = today.getDate();
    
    console.log("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞:", ym);
    console.log("–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å:", currentDay);

    // üîç –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
    const possibleDateColumns = ["–î–∞—Ç–∞", "–¥–∞—Ç–∞", "Date", "DATE"];
    const possibleRevenueColumns = ["–¢–û", "—Ç–æ", "–í—ã—Ä—É—á–∫–∞", "–≤—ã—Ä—É—á–∫–∞", "Revenue", "revenue"];
    const possibleTrafficColumns = ["–¢–†", "—Ç—Ä", "–¢—Ä–∞—Ñ–∏–∫", "—Ç—Ä–∞—Ñ–∏–∫", "Traffic", "traffic"];

    // –ù–∞–π–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    let dateColumn = possibleDateColumns.find(col => data[0] && data[0].hasOwnProperty(col));
    let revenueColumn = possibleRevenueColumns.find(col => data[0] && data[0].hasOwnProperty(col));
    let trafficColumn = possibleTrafficColumns.find(col => data[0] && data[0].hasOwnProperty(col));

    console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", { dateColumn, revenueColumn, trafficColumn });

    if (!dateColumn || !revenueColumn || !trafficColumn) {
      console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏!");
      console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", Object.keys(data[0] || {}));
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const thisMonthRows = data.filter(r => {
      const dateValue = r[dateColumn];
      if (!dateValue) return false;
      
      const d = new Date(dateValue);
      const rowYm = dateValue.slice(0, 7);
      const dayNum = d.getDate();
      
      return rowYm === ym && dayNum <= currentDay && r[revenueColumn];
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: ${thisMonthRows.length}`);
    if (thisMonthRows.length > 0) {
      console.log("–ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:", thisMonthRows.slice(0, 3));
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
    const lastYearDate = new Date(today);
    lastYearDate.setFullYear(today.getFullYear() - 1);
    const lastYm = lastYearDate.toISOString().slice(0, 7);
    
    const lastYearRows = data.filter(r => {
      const dateValue = r[dateColumn];
      if (!dateValue) return false;
      
      const d = new Date(dateValue);
      const rowYm = dateValue.slice(0, 7);
      const dayNum = d.getDate();
      
      return rowYm === lastYm && dayNum <= currentDay && r[revenueColumn];
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥ (${lastYm}): ${lastYearRows.length}`);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const validDays = new Set(thisMonthRows.map(r => r[dateColumn].split("-")[2]));
    const dayCount = validDays.size || 1;

    const totalTo = thisMonthRows.reduce((sum, r) => sum + cleanNumber(r[revenueColumn]), 0);
    const totalTr = thisMonthRows.reduce((sum, r) => sum + parseInt(r[trafficColumn] || 0), 0);
    const avgTo = Math.round(totalTo / dayCount);
    const avgTr = Math.round(totalTr / dayCount);
    const avgCheck = avgTr ? Math.round(avgTo / avgTr) : 0;

    console.log("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", { totalTo, totalTr, avgTo, avgTr, avgCheck, dayCount });

    // –ò—â–µ–º –ø–ª–∞–Ω –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const planRow = plans.find(r => r["–ú–µ—Å—è—Ü"] === ym);
    console.log("–ù–∞–π–¥–µ–Ω –ø–ª–∞–Ω –¥–ª—è –º–µ—Å—è—Ü–∞:", planRow);
    
    const planTo = parseInt(planRow?.["–ü–ª–∞–Ω –ø–æ –≤—ã—Ä—É—á–∫–µ"] || 0);
    const planTr = parseInt(planRow?.["–ü–ª–∞–Ω –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É"] || 0);
    const planAvg = planTo && planTr ? Math.round(planTo / planTr) : 0;

    console.log("–ü–ª–∞–Ω–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", { planTo, planTr, planAvg });

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const planToEl = document.getElementById("planTo");
    const planTrafficEl = document.getElementById("planTraffic");
    const planAvgEl = document.getElementById("planAvg");
    
    if (planToEl) planToEl.textContent = planTo.toLocaleString("ru-RU") + "‚ÇΩ";
    if (planTrafficEl) planTrafficEl.textContent = planTr + " —á–µ–ª.";
    if (planAvgEl) planAvgEl.textContent = planAvg + "‚ÇΩ";

    const factToEl = document.getElementById("factTo");
    const factTrafficEl = document.getElementById("factTraffic");
    const factAvgEl = document.getElementById("factAvg");
    
    if (factToEl) factToEl.textContent = avgTo.toLocaleString("ru-RU") + "‚ÇΩ";
    if (factTrafficEl) factTrafficEl.textContent = avgTr + " —á–µ–ª.";
    if (factAvgEl) factAvgEl.textContent = avgCheck + "‚ÇΩ";

    // –ó–∞–ø–∏—Å–∏
    const recTo = records.find(r => r["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"]?.includes("–≤—ã—Ä—É—á–∫–∞"));
    const recTr = records.find(r => r["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"]?.includes("—Ç—Ä–∞—Ñ–∏–∫"));

    const recordToEl = document.getElementById("recordTo");
    const recordTrafficEl = document.getElementById("recordTraffic");
    
    if (recordToEl) {
      recordToEl.textContent = parseInt((recTo?.–ó–Ω–∞—á–µ–Ω–∏–µ || '0').replace(/\s/g, '')).toLocaleString("ru-RU") + "‚ÇΩ";
    }
    if (recordTrafficEl) {
      recordTrafficEl.textContent = parseInt((recTr?.–ó–Ω–∞—á–µ–Ω–∏–µ || '0').replace(/\s/g, '')).toLocaleString("ru-RU");
    }

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º
    const prevTo = lastYearRows.reduce((s, r) => s + cleanNumber(r[revenueColumn]), 0);
    const currTo = thisMonthRows.reduce((s, r) => s + cleanNumber(r[revenueColumn]), 0);
    const diff = prevTo ? Math.round((currTo - prevTo) / prevTo * 100) : 0;
    
    const comparePrevEl = document.getElementById("comparePrev");
    if (comparePrevEl) {
      comparePrevEl.textContent = (diff >= 0 ? "+" : "") + diff + "%";
    }

    console.log("‚úÖ –°–≤–æ–¥–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", { avgTo, avgTr, avgCheck, diff });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–¥–∫–∏:", error);
  }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
async function loadChart() {
  // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  console.log("üìä –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏");
}

async function buildComparisonBlock() {
  // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö  
  console.log("üìä –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏");
}
